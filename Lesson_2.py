print('--------- Task 1 ----------')
'''
1. Создать список и заполнить его элементами различных типов данных.Реализовать скрипт
проверки типа данных каждого элемента. Использовать функцию type() для проверки типа.
Элементы списка можно не запрашивать у пользователя, а указать явно, в программе.
2. Для списка реализовать обмен значений соседних элементов. Значениями обмениваются
'''

lst = [1, 1.0, 'a', True, ['b', 2], {1:'a'}, ('a', 3), None]
for i in lst:
    print(type(i))


print('--------- Task 2 ----------')
'''
2. Для списка реализовать обмен значений соседних элементов. Значениями обмениваются
элементы с индексами 0 и 1, 2 и 3 и т. д. При нечётном количестве элементов последний
сохранить на своём месте. Для заполнения списка элементов нужно использовать функцию
input().

'''

lst = [1, 'a', 2, 'b', 3]
for i in range(0, len(lst)-1, 2):
    lst[i], lst[i + 1] = lst[i + 1], lst[i]

print(lst)

print('--------- Task 3 ----------')
'''
3. Пользователь вводит месяц в виде целого числа от 1 до 12. Сообщить, к какому времени года
относится месяц (зима, весна, лето, осень). Напишите решения через list и dict.
'''


dct = {9:'Осень', 10:'Осень', 11:'Осень', 12:'Зима', 1:'Зима', 2:'Зима', 3:'Весна', \
      4:'Весна', 5:'Весна', 6:'Лето', 7:'Лето', 8:'Лето'}

num = int(input('Введите номер месяца: '))

print(f'Это {dct.get(num)}')



lst = ['Осень', 'Зима', 'Весна', 'Лето']

m = int(input('Введите номер месяца: '))


if m == 9 or m == 10 or m == 11:
    print(f'Это {lst[0]}')
elif m == 12 or m == 1 or m == 2:
    print(f'Это {lst[1]}')
elif m == 3 or m == 4 or m == 5:
    print(f'Это {lst[2]}')
else:
    print(f'Это {lst[3]}')

print('--------- Task 4 ----------')
'''
4. Пользователь вводит строку из нескольких слов, разделённых пробелами. Вывести каждое
слово с новой строки. Строки нужно пронумеровать. Если слово длинное, выводить только
первые 10 букв в слове.

'''


st = 'Пользователь вводит строку из нескольких слов'
st = st.split()
for i in st:
    if len(i) > 10:
        print(i[0:10])
    else:
        print(i)

print('--------- Task 5 ----------')
'''
5. Реализовать структуру «Рейтинг», представляющую собой набор натуральных чисел, который
не возрастает. У пользователя нужно запрашивать новый элемент рейтинга. Если в рейтинге
существуют элементы с одинаковыми значениями, то новый элемент с тем же значением
должен разместиться после них.


'''

my_list = [7, 5, 3, 3, 2]
print(my_list)

num = float(input('Enter number: ')) # флоат номер чтобы легче отследить

for i in range(0, len(my_list)-1):
    if num > max(my_list):
        my_list.insert(0, num)
        break
    elif num <= min(my_list):
        my_list.append(num)
        break
    elif my_list[i] >= num and my_list[i + 1] < num:
         my_list.insert(i + 1, num)
         break
        
print(my_list)

print('--------- Task 6 ----------')
'''
6. *Реализовать структуру данных «Товары». Она должна представлять собой список кортежей.
Каждый кортеж хранит информацию об отдельном товаре. В кортеже должно быть два
элемента — номер товара и словарь с параметрами, то есть характеристиками товара:
название, цена, количество, единица измерения. Структуру нужно сформировать программно,
запросив все данные у пользователя.
Нужно собрать аналитику о товарах. Реализовать словарь, в котором каждый ключ —
характеристика товара, например, название. Тогда значение — список
значений-характеристик, например, список названий товаров.
'''

x = 0
dct = {}
tpl = ()
lst = []
while 1:
    x += 1
    dct = {}
    name = input('Название: ')
    if name == 'q':
        break
    dct.update({'Name':name})
    price = input('Цена: ')
    dct.update({'Price':price})
    quantity = input('Количество: ')
    dct.update({'Quantity':quantity})
    unit = input('Ед: ')
    dct.update({'Unit':unit})
    tpl = (x, dct)
    lst.append(tpl)

print('\n', lst, '\n')

analytics = {}
ls_name = []
ls_price = []
ls_quantity = []
ls_unit = []
for i in range(0, len(lst)):
    ls_name.append(lst[i][1]['Name'])
    ls_price.append(lst[i][1]['Price'])
    ls_quantity.append(lst[i][1]['Quantity'])
    ls_unit.append(lst[i][1]['Unit'])
    st_unit = set(ls_unit) # Убрать совпадение 
    ls_unit = list(st_unit) # Вернуть список
    analytics.update({'Name':ls_name})
    analytics.update({'Price':ls_price})
    analytics.update({'Quantity':ls_quantity})
    analytics.update({'Unit':ls_unit})
    
print(analytics)
